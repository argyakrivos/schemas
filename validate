#!/usr/bin/env bundle exec ruby
require "bundler/setup"

require "nokogiri"
require "colorize"
require "json-schema"

SCHEMA_FILE = {
  xml: "schema.xsd",
  json: "*.schema.json"
}

def validate_xml(xsd_file, xml_file)
  Dir.chdir(File.dirname(xml_file)) do
    errors = []
    begin
      xsd = Nokogiri::XML::Schema(File.read(File.basename(xsd_file)))
      errors.push(*xsd.errors) if xsd.errors.any?
    rescue Nokogiri::XML::SyntaxError => e
      errors << e.message
    end

    begin
      doc = Nokogiri::XML(File.read(File.basename(xml_file)))
      errors.push(*doc.errors) if doc.errors.any?
    rescue Nokogiri::XML::SyntaxError => e
      errors << e.message
    end

    begin
      xsd.validate(doc).each do |error|
        errors << error.message
      end
    rescue NoMethodError
      # no need to log this one
    end
    errors
  end
end

def validate_json(schema_file, json_file)
  Dir.chdir(File.dirname(json_file)) do
    return ["No schema file found at #{File.basename(schema_file)}"] unless File.exist?(File.basename(schema_file))
    begin
      JSON::Validator.fully_validate(File.basename(schema_file), File.basename(json_file))
    rescue
      puts $!.backtrace
      [$!.message]
    end
  end
end

def scan_and_parse(folder, type)
  totals = {}
  %i{all skipped valid invalid}.each { |k| totals[k] = 0 }

  glob_string = File.join(folder,"*.#{type}")
  schema_files = Dir.glob(File.join(folder, SCHEMA_FILE[type]))
  files = Dir.glob(glob_string) - schema_files
  
  files.each do |file|
    totals[:all] += 1
    schema_file = case type
                  when :xml
                    raise "More than one XSD found, cannot validate" if schema_files.size > 1
                    schema_files.first
                  when :json
                    "#{file.split('.')[-2]}.schema.json"
                  end
    print "   Validating #{file} against #{schema_file} ... ".colorize(:cyan)
    errors = send("validate_#{type}", schema_file, file)
    
    if errors.empty?
      totals[:valid] += 1
      puts "valid!".colorize(:green)
    else
      totals[:invalid] += 1
      puts "invalid!".colorize(:red)
      errors.each do |msg|
        puts "      #{msg}".colorize(:red)
      end
    end
  end

  totals
end

overall_totals = {
  invalid: 0,
  skipped: 0
}
location = File.directory?(ARGV[0]) ? ARGV[0] : "./" rescue "./"

# for all directories
Dir.glob(File.join(location,"**/*/")) do |folder|
  puts "Going through #{folder}"
  # if there are multiple schemas (only applicable for XML)
  xsd_files = Dir[File.join(folder, "*.xsd")]

  if (xsd_files.length > 1)
    num_files = xsd_files.length + json_schema_files.length
    # overall_totals[:all] += num_files
    # overall_totals[:invalid] += num_files
    files_list = xsd_files.map { |f| File.basename(f) }.join(", ")
    puts "   Multiple XML schema files detected (#{files_list}) - marking them as invalid!".colorize(:red)
    puts "   You should have only one schema file in a directory called: #{SCHEMA_FILE[:xml]}".colorize(:red)
    next
  end

  SCHEMA_FILE.keys.each do |file_type|
    scan_and_parse(folder, file_type).each_pair do |total_type, count|
      overall_totals[total_type] = (overall_totals[total_type] || 0) + count
    end
  end
end

info = "\n#{overall_totals[:all]} files ("
info << "#{overall_totals[:invalid]} invalid".colorize(:red) << ", " if overall_totals[:invalid] > 0
info << "#{overall_totals[:skipped]} skipped".colorize(:yellow) << ", " if overall_totals[:skipped] > 0
info << "#{overall_totals[:valid]} valid".colorize(:green) << ")"
puts info
