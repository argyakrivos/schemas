#!/usr/bin/env bundle exec ruby
require "bundler/setup"

require "nokogiri"
require "colorize"
require "json-schema"

SCHEMA_FILE = {
  xml: "schema.xsd",
  json: "schema.json"
}

def validate_xml(xsd_file, xml_file)
  Dir.chdir(File.dirname(xml_file)) do
    errors = []
    begin
      xsd = Nokogiri::XML::Schema(File.read(File.basename(xsd_file)))
      errors.push(*xsd.errors) if xsd.errors.any?
    rescue Nokogiri::XML::SyntaxError => e
      errors << e.message
    end

    begin
      doc = Nokogiri::XML(File.read(File.basename(xml_file)))
      errors.push(*doc.errors) if doc.errors.any?
    rescue Nokogiri::XML::SyntaxError => e
      errors << e.message
    end

    begin
      xsd.validate(doc).each do |error|
        errors << error.message
      end
    rescue NoMethodError
      # no need to log this one
    end
    errors
  end
end

def validate_json(schema_file, json_file)
  Dir.chdir(File.dirname(json_file)) do
    begin
      JSON::Validator.validate!(File.basename(schema_file), File.read(File.basename(json_file)))
    rescue JSON::Schema::ValidationError => e
      return [e.message]
    end
    return []
  end
end

def scan_and_parse(type, schema_file)
  totals = {}
  %i{all skipped valid invalid}.each { |k| totals[k] = 0 }

  glob_string = File.join(File.dirname(schema_file),"*.#{type}")
  files = Dir.glob(glob_string) - SCHEMA_FILE.values.map { |f| File.join(File.dirname(schema_file), f) }
  if File.exists? schema_file
    # if there are no XML files to validate against the schema
    if files.empty?
      totals[:all] += 1
      totals[:skipped] += 1
      puts "   Skipping #{File.basename(schema_file)} - could not find any XML files to validate against".colorize(:yellow)
      return totals
    end
    files.each do |file|
      totals[:all] += 1
      print "   Validating #{file} against #{schema_file} ... ".colorize(:cyan)
      errors = send("validate_#{type}", schema_file, file)
      if errors.empty?
        totals[:valid] += 1
        puts "valid!".colorize(:green)
      else
        totals[:invalid] += 1
        puts "invalid!".colorize(:red)
        errors.each do |msg|
          puts "      #{msg}".colorize(:red)
        end
      end
    end
  else
    if files.any?
      totals[:all] += files.length
      totals[:invalid] += files.length
      files_list = files.map { |f| File.basename(f) }.join(", ")
      puts "   Found #{type.upcase} files without any schema definition (#{files_list}) - marking them as invalid!".colorize(:red)
      puts "   You should either remove them or create a schema definition file (#{SCHEMA_FILE})".colorize(:red)
    end
  end
  totals
end

overall_totals = {}

# for all directories
Dir.glob("**/*/") do |folder|
  puts "Going through #{folder}"
  # if there are multiple schemas
  xsd_files = Dir[File.join(folder, "*.xsd")]
  json_schema_files = Dir[File.join(folder, "*schema.json")]

  if (xsd_files.length > 1) || (json_schema_files.length > 1)
    num_files = xsd_files.length + json_schema_files.length
    $total_files += num_files
    $invalid_files += num_files
    files_list = (xsd_files + json_schema_files).map { |f| File.basename(f) }.join(", ")
    puts "   Multiple schema files detected (#{files_list}) - marking them as invalid!".colorize(:red)
    puts "   You should have only one schema file in a directory called: #{SCHEMA_FILE[:xml]} or #{SCHEMA_FILE[:json]}".colorize(:red)
    next
  end

  SCHEMA_FILE.each_pair do |file_type, schema_file|
    scan_and_parse(file_type, File.join(folder,schema_file)).each_pair do |total_type, count|
      overall_totals[total_type] = (overall_totals[total_type] || 0) + count
    end
  end
end

info = "\n#{overall_totals[:all]} files ("
info << "#{overall_totals[:invalid]} invalid".colorize(:red) << ", " if overall_totals[:invalid] > 0
info << "#{overall_totals[:skipped]} skipped".colorize(:yellow) << ", " if overall_totals[:skipped] > 0
info << "#{overall_totals[:valid]} valid".colorize(:green) << ")"
puts info
